# 1. Cargar el DataFrame adicional para recuperar variables educativas
df_completo = pd.read_csv('datos/base_completa_05+25.csv')

# Recodificar las variables

# Diccionario para CH12 (Nivel educativo más alto)
map_ch12 = {
    'Jardín/Preescolar': 1,
    'Primario': 2,
    'EGB': 3,
    'Secundario': 4,
    'Polimodal': 5,
    'Terciario': 6,
    'Universitario': 7,
    'Posgrado': 8,
    'Especial': 9,
    'Ns/Nr': np.nan,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    99: np.nan
}
df_completo['NIVEL_EDUCATIVO'] = df_completo['CH12'].map(map_ch12)

# Diccionario para CH13 (Finalizó ese nivel)
map_ch13 = {
    'Sí': 1,
    'No': 2,
    'Ns/Nr': np.nan,
    1: 1,
    2: 2,
    9: np.nan
}
df_completo['NIVEL_COMPLETO'] = df_completo['CH13'].map(map_ch13)

# Recodificar CH14 (Último año aprobado) a numérica
temp_col_numerica = pd.to_numeric(df_completo['CH14'], errors='coerce')
df_completo['ULTIMO_ANO_APROBADO'] = temp_col_numerica.replace(99.0, np.nan)

# Crear la llave HOGAR_ID para unir con el DataFrame principal
# Aseguramos que CODUSU y NRO_HOGAR sean strings antes de concatenar
df_completo['HOGAR_ID'] = df_completo['CODUSU'].astype(str) + df_completo['NRO_HOGAR'].astype(str)

# Verificación
# Mostramos las nuevas columnas y la llave creada para algunas filas.
columnas_a_ver = ['COMPONENTE', 'HOGAR_ID', 'CH12', 'NIVEL_EDUCATIVO', 'CH13', 'NIVEL_COMPLETO', 'CH14']
print(df_completo[columnas_a_ver].tail(15))

print("\nEl DataFrame 'df_completo' está listo para ser unido con el principal.")
print(f"Se creó la llave 'HOGAR_ID' y las columnas recodificadas.")


----------------------------------------------------------------------------------------------------------------------------------
# Crear la variable 'educ' (años de educación) basada en las reglas especificadas
# Para legibilidad, asignamos las columnas a variables
# Convertimos CH06 y CH10 a numérico para las nuevas reglas
try:
    ch06 = pd.to_numeric(df_completo['CH06'], errors='coerce')
    ch10 = pd.to_numeric(df_completo['CH10'], errors='coerce')
    ch12 = df_completo['NIVEL_EDUCATIVO']
    ch13 = df_completo['NIVEL_COMPLETO']
    ch14 = df_completo['ULTIMO_ANO_APROBADO']
except KeyError as e:
    print(f"Error: No se encontró la columna {e}. Asegúrate de que 'CH06' y 'CH10' existan en 'df_completo'.")


# Definir las Condiciones (24 elementos)
conditions = [
    # Reglas de 'educ=0'
    (ch06 < 2),  # Menores de dos años
    (ch10 == 3), # Nunca asistió
    (ch12 == 9), # Educación especial

    # Bloque A: Casos COMPLETOS (ch13 == 1)
    (ch13 == 1) & (ch12 == 1),  # Jardín completo
    (ch13 == 1) & (ch12 == 2),  # Primaria completa
    (ch13 == 1) & (ch12 == 3),  # EGB completa
    (ch13 == 1) & ((ch12 == 4) | (ch12 == 5)), # Secundario o Polimodal completo
    (ch13 == 1) & (ch12 == 6),  # Terciario completo
    (ch13 == 1) & (ch12 == 7),  # Universitario completo
    (ch13 == 1) & (ch12 == 8),  # Posgrado completo

    # Bloque B: Casos INCOMPLETOS (ch13 == 2)
    
    # *Terciario incompleto (ch12 == 6)
    (ch13 == 2) & (ch12 == 6) & (ch14 == 0),
    (ch13 == 2) & (ch12 == 6) & (ch14 == 1),
    (ch13 == 2) & (ch12 == 6) & (ch14 >= 2), # 2 o más años

    # *Universitario incompleto (ch12 == 7)
    (ch13 == 2) & (ch12 == 7) & (ch14 == 0),
    (ch13 == 2) & (ch12 == 7) & (ch14 == 1),
    (ch13 == 2) & (ch12 == 7) & (ch14 == 2),
    (ch13 == 2) & (ch12 == 7) & (ch14 == 3),
    (ch13 == 2) & (ch12 == 7) & (ch14 == 4),
    (ch13 == 2) & (ch12 == 7) & (ch14 >= 5), # 5 o más años

    # *Posgrado incompleto (ch12 == 8)
    (ch13 == 2) & (ch12 == 8) & (ch14 == 0),
    (ch13 == 2) & (ch12 == 8) & (ch14 == 1),
    (ch13 == 2) & (ch12 == 8) & (ch14 == 2),
    (ch13 == 2) & (ch12 == 8) & (ch14 >= 3), # 3 o más años

    # *Incompletos con lógica simple (base + años)
    (ch13 == 2) & (ch12 == 2),  # Primaria incompleta
    (ch13 == 2) & (ch12 == 3),  # EGB incompleta
    (ch13 == 2) & (ch12 == 4),  # Secundaria incompleta
    (ch13 == 2) & (ch12 == 5)   # Polimodal incompleto
]

# Definir los Valores (27 elementos)
choices = [
    0,  # Menores de dos años
    0,  # Nunca asistió
    0,  # Educación especial

    # --- Bloque A (Completos) ---
    1,   # Jardín
    8,   # Primaria
    11,  # EGB
    13,  # Sec/Poli
    16,  # Terciario
    19,  # Uni
    23,  # Posgrado

    # --- Bloque B (Incompletos) ---
    # *Terciario
    13,  # 0 años
    14,  # 1 año
    15,  # 2+ años
    
    # *Universitario
    13,  # 0 años
    14,  # 1 año
    15,  # 2 años
    16,  # 3 años
    17,  # 4 años
    18,  # 5+ años
    
    # *Posgrado
    19,  # 0 años
    20,  # 1 año
    21,  # 2 años
    22,  # 3+ años
    
    # *Incompletos (Simples)
    ch14 + 1,  # Primaria: años aprobados + 1
    ch14 + 1,  # EGB: años aprobados + 1
    ch14 + 8,  # Secundaria: años aprobados + 8
    ch14 + 10  # Polimodal: años aprobados + 10
]


# Crear la columna 'educ'
df_completo['educ'] = np.select(conditions, choices, default=np.nan)

print("Columna 'educ' (años de educación) creada con éxito.")

------------------------------------------------------------------------------------------------------------------------------------------
# --- 1. Limpieza de 'df' (principal) [16774 filas] ---
print("Limpiando 'df' (principal) con limpieza agresiva...")
# Forzar HOGAR_ID a string, quitar espacios y CUALQUIER decimal
df['HOGAR_ID'] = df['HOGAR_ID'].astype(str).str.strip().str.split('.').str[0]
df['COMPONENTE'] = pd.to_numeric(df['COMPONENTE'], errors='coerce').astype('Int64')

# --- Limpieza de 'df_completo' ---
print("Limpiando 'df_completo' con limpieza agresiva...")
df_completo['HOGAR_ID'] = df_completo['HOGAR_ID'].astype(str).str.strip().str.split('.').str[0]
df_completo['COMPONENTE'] = pd.to_numeric(df_completo['COMPONENTE'], errors='coerce').astype('Int64')

# --- 3. Recrear 'columna_educ' (ahora con claves 100% limpias) ---
print("Recreando 'columna_educ'...")
columna_educ = df_completo[['HOGAR_ID', 'COMPONENTE', 'educ']]

# --- 4. DIAGNÓSTICO PRE-MERGE (Igual que antes) ---
nulos_de_logica = columna_educ['educ'].isna().sum()
nulos_clave_comp = df['COMPONENTE'].isna().sum()
nulos_clave_hogar = df['HOGAR_ID'].isna().sum()
total_filas_df_izq = len(df)
total_filas_df_der = len(columna_educ)

# --- 5. Correr el MERGE ---
print("Ejecutando el merge final...")
df_principal_final = pd.merge(
    df,
    columna_educ,
    on=['HOGAR_ID', 'COMPONENTE'],
    how='left'
)

# --- 6. DIAGNÓSTICO FINAL ---
print("\n--- ¡Merge Completo (Limpieza Agresiva)! Diagnóstico Final: ---")
total_nulos_final = df_principal_final['educ'].isna().sum()
print(f"Total de nulos en 'educ': {total_nulos_final}")
print("-------------------------------------------------")
print(f"  {nulos_de_logica} nulos vienen de la 'lógica np.select'.")

nulos_por_fallo_de_merge = total_nulos_final - nulos_de_logica
print(f"  {nulos_por_fallo_de_merge} nulos vienen de un 'fallo de merge'.")

print("\nCausas del fallo de merge:")
print(f"  - {nulos_clave_comp} filas en 'df' tienen 'COMPONENTE' nulo.")
print(f"  - {total_filas_df_izq - total_filas_df_der} filas en 'df' no existen en 'columna_educ' (diff. tamaño).")
print(f"  - {nulos_por_fallo_de_merge - nulos_clave_comp - (total_filas_df_izq - total_filas_df_der)} fallos restantes por otras diferencias de clave.")
-----------------------------------------------------------------------------------------------------------------------------------------

